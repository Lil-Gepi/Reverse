}
}
ne_estimates <- na.omit(ne_estimates)
ne <- ne_estimates$ne; if(length(which(ne<0))>0){ne_estimates <- ne_estimates[-which(ne<0)]}
ne_estimates$replicate <- as.factor(ne_estimates$replicate)
median_ne <- t(sapply(replicates, function(x) {idx <- which(ne_estimates$replicate == x);
val <- sort(ne_estimates$ne[idx]);
med <- median(val); # median
up <- val[qbinom(1-0.025, length(idx), 0.5)+1]; # CI 95% of a median
down <- val[qbinom(0.025, length(idx), 0.5)];  # CI 95% of a median
round(c(down, med, up))}))
median_auto <- data.frame(replicate = replicates, type = rep("autosomes", nb_replicates),
start = rep(times[1], nb_replicates), end = rep(times[2], nb_replicates),
CI_95_down_median_ne = median_ne[, 1], median_ne = median_ne[, 2], CI_95_up_median_ne = median_ne[, 3])
median_auto$replicate <- as.factor(median_auto$replicate)
median_auto
}
else if(whichChrom == "X") {
auto.dt.pol <- dt.pol[which(dt.pol$chr == "X"), ]
auto.dt.pol$randomSamp  <- 1:nrow(auto.dt.pol)
auto.dt.dp <- dt.dp[which(dt.dp$CHROM == "X"), ]
auto.dt.dp$randomSamp  <- 1:nrow(auto.dt.dp)
for (r in 1:length(replicates)){
print(r)
pref_i <- paste(timepoints[1], "_r", r, sep = "") #time point i
pref_j <- paste(timepoints[2], "_r", r, sep = "") #time point j with j>i
for(j in 1:length(nrIteration)){
randomSNPs <- sample(1:nrow(auto.dt.pol), size = nrSNPs)
randomSNPs <- sort(randomSNPs, decreasing = F)
freqi <- unlist(subset(auto.dt.pol, randomSamp %in% randomSNPs, select = paste(pref_i)), use.names = F)
freqj <- unlist(subset(auto.dt.pol, randomSamp %in% randomSNPs, select = paste(pref_j)), use.names = F)
covi <- unlist(subset(auto.dt.dp, randomSamp %in% randomSNPs, select = paste(pref_i)), use.names = F)
covj <- unlist(subset(auto.dt.dp, randomSamp %in% randomSNPs, select = paste(pref_j)), use.names = F)
ne <- estimateNe(p0 = freqi, pt = freqj, cov0 = covi, covt = covj, t = timepoints[2]-timepoints[1],
ploidy = 2, truncAF = 0.05, method = "P.planI", poolSize = poolSize, Ncensus = census)
ne_estimates <- rbind(ne_estimates, data.frame(replicate = r, start = times[1], end = times[2], trial = j,  ne = ne))
}
}
ne_estimates <- na.omit(ne_estimates)
ne <- ne_estimates$ne; if(length(which(ne<0))>0){ne_estimates <- ne_estimates[-which(ne<0)]}
ne_estimates$replicate <- as.factor(ne_estimates$replicate)
median_ne <- t(sapply(replicates, function(x) {idx <- which(ne_estimates$replicate == x);
val <- sort(ne_estimates$ne[idx]);
med <- median(val); # median
up <- val[qbinom(1-0.025, length(idx), 0.5)+1]; # CI 95% of a median
down <- val[qbinom(0.025, length(idx), 0.5)];  # CI 95% of a median
round(c(down, med, up))}))
median_auto <- data.frame(replicate = replicates, type = rep("autosomes", ),
start = rep(times[1], nb_replicates), end = rep(times[2], nb_replicates),
CI_95_down_median_ne = median_ne[, 1], median_ne = median_ne[, 2], CI_95_up_median_ne = median_ne[, 3])
median_auto$replicate <- as.factor(median_auto$replicate)
median_auto
}
}
#
# colnames(dt.pol) <- c(colnames(dt.pol[,1:5]), mycols)
# ne estimate
ne.est <- NeEstimate(dt.pol = dt.pol, dt.dp = dt.dp, whichChrom = "autosomes", nrSNPs = 1000, nrIteration = 100, timepoints = c(0,60), replicates = 1:10, poolSize = c(600,600), census = 1250)
#
# colnames(dt.pol) <- c(colnames(dt.pol[,1:5]), mycols)
# ne estimate
ne.est <- NeEstimate(dt.pol = dt.pol, dt.dp = dt.dp, whichChrom = "autosomes", nrSNPs = 1000, nrIteration = 100, timepoints = c(0,60), replicates = 1:10, poolSize = c(600,600), census = 1250)
#to estimate Ne usting PoolSeq
NeEstimate <- function(dt.pol,
dt.dp,
whichChrom = "autosomes",
nrSNPs = 1000L,
nrIteration = 100L,
timepoints = c(0L,60L),
poolSize = c(600L,600L),
replicates = 1L:10L,
census = 1250L)
{
require(poolSeq)
ne_estimates <- data.frame(replicate = 0, start = 0, end = 0, trial = 0,  ne = 0)
if(whichChrom == "autosomes") {
auto.dt.pol <- dt.pol[which(dt.pol$chr != "X"), ]
auto.dt.pol$randomSamp  <- 1:nrow(auto.dt.pol)
auto.dt.dp <- dt.dp[which(dt.dp$CHROM != "X"), ]
auto.dt.dp$randomSamp  <- 1:nrow(auto.dt.dp)
for (r in 1:length(replicates)){
print(r)
pref_i <- paste(timepoints[1], "_r", r, sep = "") #time point i
pref_j <- paste(timepoints[2], "_r", r, sep = "") #time point j with j>i
print(pref_i)
print(pref_j)
for(j in 1:nrIteration){
print(j)
randomSNPs <- sample(1:nrow(auto.dt.pol), size = nrSNPs)
randomSNPs <- sort(randomSNPs, decreasing = F)
freqi <- unlist(subset(auto.dt.pol, randomSamp %in% randomSNPs, select = pref_i), use.names = F)
freqj <- unlist(subset(auto.dt.pol, randomSamp %in% randomSNPs, select = pref_j), use.names = F)
covi <- unlist(subset(auto.dt.dp, randomSamp %in% randomSNPs, select = pref_i), use.names = F)
covj <- unlist(subset(auto.dt.dp, randomSamp %in% randomSNPs, select = pref_j), use.names = F)
ne <- estimateNe(p0 = freqi, pt = freqj, cov0 = covi, covt = covj, t = timepoints[2]-timepoints[1],
ploidy = 2, truncAF = 0.05, method = "P.planI", poolSize = poolSize, Ncensus = census)
ne_estimates <- rbind(ne_estimates, data.frame(replicate = r, start = times[1], end = times[2], trial = j,  ne = ne))
}
}
ne_estimates <- na.omit(ne_estimates)
ne <- ne_estimates$ne; if(length(which(ne<0))>0){ne_estimates <- ne_estimates[-which(ne<0)]}
ne_estimates$replicate <- as.factor(ne_estimates$replicate)
median_ne <- t(sapply(replicates, function(x) {idx <- which(ne_estimates$replicate == x);
val <- sort(ne_estimates$ne[idx]);
med <- median(val); # median
up <- val[qbinom(1-0.025, length(idx), 0.5)+1]; # CI 95% of a median
down <- val[qbinom(0.025, length(idx), 0.5)];  # CI 95% of a median
round(c(down, med, up))}))
median_auto <- data.frame(replicate = replicates, type = rep("autosomes", nb_replicates),
start = rep(times[1], nb_replicates), end = rep(times[2], nb_replicates),
CI_95_down_median_ne = median_ne[, 1], median_ne = median_ne[, 2], CI_95_up_median_ne = median_ne[, 3])
median_auto$replicate <- as.factor(median_auto$replicate)
median_auto
}
else if(whichChrom == "X") {
auto.dt.pol <- dt.pol[which(dt.pol$chr == "X"), ]
auto.dt.pol$randomSamp  <- 1:nrow(auto.dt.pol)
auto.dt.dp <- dt.dp[which(dt.dp$CHROM == "X"), ]
auto.dt.dp$randomSamp  <- 1:nrow(auto.dt.dp)
for (r in 1:length(replicates)){
print(r)
pref_i <- paste(timepoints[1], "_r", r, sep = "") #time point i
pref_j <- paste(timepoints[2], "_r", r, sep = "") #time point j with j>i
for(j in 1:length(nrIteration)){
randomSNPs <- sample(1:nrow(auto.dt.pol), size = nrSNPs)
randomSNPs <- sort(randomSNPs, decreasing = F)
freqi <- unlist(subset(auto.dt.pol, randomSamp %in% randomSNPs, select = paste(pref_i)), use.names = F)
freqj <- unlist(subset(auto.dt.pol, randomSamp %in% randomSNPs, select = paste(pref_j)), use.names = F)
covi <- unlist(subset(auto.dt.dp, randomSamp %in% randomSNPs, select = paste(pref_i)), use.names = F)
covj <- unlist(subset(auto.dt.dp, randomSamp %in% randomSNPs, select = paste(pref_j)), use.names = F)
ne <- estimateNe(p0 = freqi, pt = freqj, cov0 = covi, covt = covj, t = timepoints[2]-timepoints[1],
ploidy = 2, truncAF = 0.05, method = "P.planI", poolSize = poolSize, Ncensus = census)
ne_estimates <- rbind(ne_estimates, data.frame(replicate = r, start = times[1], end = times[2], trial = j,  ne = ne))
}
}
ne_estimates <- na.omit(ne_estimates)
ne <- ne_estimates$ne; if(length(which(ne<0))>0){ne_estimates <- ne_estimates[-which(ne<0)]}
ne_estimates$replicate <- as.factor(ne_estimates$replicate)
median_ne <- t(sapply(replicates, function(x) {idx <- which(ne_estimates$replicate == x);
val <- sort(ne_estimates$ne[idx]);
med <- median(val); # median
up <- val[qbinom(1-0.025, length(idx), 0.5)+1]; # CI 95% of a median
down <- val[qbinom(0.025, length(idx), 0.5)];  # CI 95% of a median
round(c(down, med, up))}))
median_auto <- data.frame(replicate = replicates, type = rep("autosomes", ),
start = rep(times[1], nb_replicates), end = rep(times[2], nb_replicates),
CI_95_down_median_ne = median_ne[, 1], median_ne = median_ne[, 2], CI_95_up_median_ne = median_ne[, 3])
median_auto$replicate <- as.factor(median_auto$replicate)
median_auto
}
}
#
# colnames(dt.pol) <- c(colnames(dt.pol[,1:5]), mycols)
# ne estimate
ne.est <- NeEstimate(dt.pol = dt.pol, dt.dp = dt.dp, whichChrom = "autosomes", nrSNPs = 1000, nrIteration = 100, timepoints = c(0,60), replicates = 1:10, poolSize = c(600,600), census = 1250)
nb_SNPs <- 1000 #number of SNPs
nb_rounds <- 100 #number of sampling trials
times <- c(0, 60) #2 time points
census <- 600 #census size
poolSize <- rep(census, times=2)
replicates <- 1:10
ne_estimates <- NULL
nb_replicates <- 10
generations <- c(0, 60) #generations sequenced
tp <- length(generations) #number of time points sequenced
head(dt.pol)
####autosomes----
dt.dp.auto <- dt.dp[which(dt.dp$CHROM != "X"),]
dt.af.auto <- dt.pol[which(dt.pol$chr != "X"),]
for (r in replicates){
print(r)
pref_i <- paste( times[1], "_r", r, sep = "") #time point i
pref_j <- paste(times[2], "_r", r, sep = "") #time point j with j>i
for(j in seq_len(nb_rounds)){
cov_trial <- sample_n(dt.dp.auto, size = nb_SNPs)
af_trial <- sample_n(dt.af.auto, size = nb_SNPs)
pi <- unlist(subset(af_trial, select = pref_i))
pj <- unlist(subset(af_trial, select = pref_j))
covi <- unlist(subset(cov_trial, select = pref_i))
covj <- unlist(subset(cov_trial, select = pref_j))
ne <- estimateNe(p0 = pi, pt = pj, cov0 = covi, covt = covj, t = 60,
ploidy = 2, truncAF = 0.05, method = "P.planI", poolSize = poolSize, Ncensus = census)
ne_estimates <- rbind(ne_estimates, data.frame(replicate = r, start = times[1], end = times[2], trial = j,  ne = ne))
}
}
library(dplyr)
for (r in replicates){
print(r)
pref_i <- paste( times[1], "_r", r, sep = "") #time point i
pref_j <- paste(times[2], "_r", r, sep = "") #time point j with j>i
for(j in seq_len(nb_rounds)){
cov_trial <- sample_n(dt.dp.auto, size = nb_SNPs)
af_trial <- sample_n(dt.af.auto, size = nb_SNPs)
pi <- unlist(subset(af_trial, select = pref_i))
pj <- unlist(subset(af_trial, select = pref_j))
covi <- unlist(subset(cov_trial, select = pref_i))
covj <- unlist(subset(cov_trial, select = pref_j))
ne <- estimateNe(p0 = pi, pt = pj, cov0 = covi, covt = covj, t = 60,
ploidy = 2, truncAF = 0.05, method = "P.planI", poolSize = poolSize, Ncensus = census)
ne_estimates <- rbind(ne_estimates, data.frame(replicate = r, start = times[1], end = times[2], trial = j,  ne = ne))
}
}
ne_estimates <- na.omit(ne_estimates)
ne <- ne_estimates$ne; if(length(which(ne<0))>0){ne_estimates <- ne_estimates[-which(ne<0)]}
ne_estimates$replicate <- as.factor(ne_estimates$replicate)
median_ne <- t(sapply(replicates, function(x) {idx <- which(ne_estimates$replicate == x);
val <- sort(ne_estimates$ne[idx]);
med <- median(val); # median
up <- val[qbinom(1-0.025, length(idx), 0.5)+1]; # CI 95% of a median
down <- val[qbinom(0.025, length(idx), 0.5)];  # CI 95% of a median
round(c(down, med, up))}))
median_auto <- data.frame(replicate = replicates, type = rep("autosomes", nb_replicates),
start = rep(times[1], nb_replicates), end = rep(times[2], nb_replicates),
CI_95_down_median_ne = median_ne[, 1], median_ne = median_ne[, 2], CI_95_up_median_ne = median_ne[, 3])
median_auto$replicate <- as.factor(median_auto$replicate)
rm(median_ne, ne_estimates, covi, covj, j)
View(median_auto)
####X chromosome----
dt.dp.X <- dt.dp[which(dt.dp$CHROM == "X"),]
dt.af.X <- dt.pol[which(dt.pol$chr == "X"),]
for (r in replicates){
print(r)
pref_i <- paste( times[1], "_r", r, sep = "") #time point i
pref_j <- paste(times[2], "_r", r, sep = "") #time point j with j>i
for(j in seq_len(nb_rounds)){
cov_trial <- sample_n(dt.dp.X, size = nb_SNPs)
af_trial <- sample_n(dt.af.X, size = nb_SNPs)
pi <- unlist(subset(af_trial, select = pref_i))
pj <- unlist(subset(af_trial, select = pref_j))
covi <- unlist(subset(cov_trial, select = pref_i))
covj <- unlist(subset(cov_trial, select = pref_j))
ne <- estimateNe(p0 = pi, pt = pj, cov0 = covi, covt = covj, t = 60,
ploidy = 2, truncAF = 0.05, method = "P.planI", poolSize = poolSize, Ncensus = census)
ne_estimates <- rbind(ne_estimates, data.frame(replicate = r, start = times[1], end = times[2], trial = j,  ne = ne))
}
}
####X chromosome----
ne_estimates <- NULL
for (r in replicates){
print(r)
pref_i <- paste( times[1], "_r", r, sep = "") #time point i
pref_j <- paste(times[2], "_r", r, sep = "") #time point j with j>i
for(j in seq_len(nb_rounds)){
cov_trial <- sample_n(dt.dp.X, size = nb_SNPs)
af_trial <- sample_n(dt.af.X, size = nb_SNPs)
pi <- unlist(subset(af_trial, select = pref_i))
pj <- unlist(subset(af_trial, select = pref_j))
covi <- unlist(subset(cov_trial, select = pref_i))
covj <- unlist(subset(cov_trial, select = pref_j))
ne <- estimateNe(p0 = pi, pt = pj, cov0 = covi, covt = covj, t = 60,
ploidy = 2, truncAF = 0.05, method = "P.planI", poolSize = poolSize, Ncensus = census)
ne_estimates <- rbind(ne_estimates, data.frame(replicate = r, start = times[1], end = times[2], trial = j,  ne = ne))
}
}
ne_estimates <- na.omit(ne_estimates)
ne <- ne_estimates$ne; if(length(which(ne<0))>0){ne_estimates <- ne_estimates[-which(ne<0)]}
ne_estimates$replicate <- as.factor(ne_estimates$replicate)
median_ne <- t(sapply(replicates, function(x) {idx <- which(ne_estimates$replicate == x);
val <- sort(ne_estimates$ne[idx]);
med <- median(val); # median
up <- val[qbinom(1-0.025, length(idx), 0.5)+1]; # CI 95% of a median
down <- val[qbinom(0.025, length(idx), 0.5)];  # CI 95% of a median
round(c(down, med, up))}))
median_X <- data.frame(replicate = replicates, type = rep("X", nb_replicates),
start = rep(times[1], nb_replicates), end = rep(times[2], nb_replicates),
CI_95_down_median_ne = median_ne[, 1], median_ne = median_ne[, 2], CI_95_up_median_ne = median_ne[, 3])
median_X$replicate <- as.factor(median_X$replicate)
rm(census, covi, covj, generations, j, nb_replicates, nb_rounds, nb_SNPs, ne, pi, pj, poolSize,median_ne, ne_estimates, pref_i, pref_j,cov_freq_trial,
r, replicates, times, tp)
# calculate p-values
dt.pval <- calc_pvals(dt.pol,dt.dp,
par.rep = c(1:10),
par.gen = c(0,10,20,30,40,50,60),
par.Ne = median_auto$median_ne,
par.poolSize = rep(625,60))
# calculate p-values
dt.pval <- calc_pvals(dt.pol,dt.dp,
par.rep = c(1:10),
par.gen = c(0,10,20,30,40,50,60),
par.Ne = median_auto$median_ne,
par.poolSize = rep(625,70))
require(ggplot2)
thres_cmh_genome <- 1e-7
thres_cmh_suggest <- 5e-7
View(dt.pval)
colnames(dt.pval) <- c("CHR", "BP", "P")
result <- dt.pval
don <- result %>%
group_by(CHR) %>%
summarise(chr_len=max(BP)) %>%
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
left_join(result, ., by=c("CHR"="CHR")) %>%
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
tiff("./cold_CMH_adapted_0-60.tiff", width = 24, height = 16, res = 450, units = "cm")
ggplot(don, aes(x=BPcum, y=-log10(P))) +
ggtitle("genomic signatures in cold adaptation contrasting F0 and F60")+
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=1) +
scale_color_manual(values = rep(c("grey", "black"), 22 )) +
scale_x_continuous(name = "Chromosome", label = c("X", "2L","2R","3L", "3R", "4"), breaks= axisdf$center ) +
scale_y_continuous(name = "-log10(q)", expand = c(0, 0) ) +
geom_hline(yintercept=-log10(thres_cmh_genome), linetype="dashed", color = "red") +
geom_hline(yintercept=-log10(thres_cmh_suggest), linetype="dashed", color = "blue") +
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
dev.off()
dt.pval["CHR"][dt.pval["CHR"] == "2L"] <- 2
dt.pval["CHR"][dt.pval["CHR"] == "2R"] <- 3
dt.pval["CHR"][dt.pval["CHR"] == "4"] <- 6
dt.pval["CHR"][dt.pval["CHR"] == "3L"] <- 4
dt.pval["CHR"][dt.pval["CHR"] == "3R"] <- 5
dt.pval["CHR"][dt.pval["CHR"] == "X"] <- 1
dt.pval$CHR <- as.numeric(dt.pval$CHR)
unique(dt.pval$CHR)
# calculate p-values
dt.pval <- calc_pvals(dt.pol,dt.dp,
par.rep = c(1:10),
par.gen = c(0,10,20,30,40,50,60),
par.Ne = median_auto$median_ne,
par.poolSize = rep(625,70))
colnames(dt.pval) <- c("CHR", "BP", "P")
unique(dt.pval$CHR)
dt.pval[which(dt.pval["CHR"] == "2L"), "CHR"]
dt.pval[which(dt.pval[,"CHR"] == "2L"), "CHR"]
dt.pval[which(dt.pval[,"CHR"] == "2L"), "CHR"]<- 2
dt.pval[which(dt.pval[,"CHR"] == "2R"), "CHR"]<- 3
dt.pval[which(dt.pval[,"CHR"] == "4"), "CHR"]<- 6
dt.pval[which(dt.pval[,"CHR"] == "3L"), "CHR"]<- 4
dt.pval[which(dt.pval[,"CHR"] == "3R"), "CHR"]<- 5
dt.pval[which(dt.pval[,"CHR"] == "X"), "CHR"]<- 1
dt.pval$CHR <- as.numeric(dt.pval$CHR)
require(ggplot2)
thres_cmh_genome <- 1e-7
thres_cmh_suggest <- 5e-7
result <- dt.pval
don <- result %>%
group_by(CHR) %>%
summarise(chr_len=max(BP)) %>%
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
left_join(result, ., by=c("CHR"="CHR")) %>%
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
tiff("./cold_CMH_adapted_0-60.tiff", width = 24, height = 16, res = 450, units = "cm")
ggplot(don, aes(x=BPcum, y=-log10(P))) +
ggtitle("genomic signatures in cold adaptation contrasting F0 and F60")+
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=1) +
scale_color_manual(values = rep(c("grey", "black"), 22 )) +
scale_x_continuous(name = "Chromosome", label = c("X", "2L","2R","3L", "3R", "4"), breaks= axisdf$center ) +
scale_y_continuous(name = "-log10(q)", expand = c(0, 0) ) +
geom_hline(yintercept=-log10(thres_cmh_genome), linetype="dashed", color = "red") +
geom_hline(yintercept=-log10(thres_cmh_suggest), linetype="dashed", color = "blue") +
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
dev.off()
thres_cmh_genome <- 5e-8
thres_cmh_suggest <- 5e-6
result <- dt.pval
don <- result %>%
group_by(CHR) %>%
summarise(chr_len=max(BP)) %>%
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
left_join(result, ., by=c("CHR"="CHR")) %>%
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
tiff("./cold_CMH_adapted_0-60.tiff", width = 24, height = 16, res = 450, units = "cm")
ggplot(don, aes(x=BPcum, y=-log10(P))) +
ggtitle("genomic signatures in cold adaptation contrasting F0 and F60")+
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=1) +
scale_color_manual(values = rep(c("grey", "black"), 22 )) +
scale_x_continuous(name = "Chromosome", label = c("X", "2L","2R","3L", "3R", "4"), breaks= axisdf$center ) +
scale_y_continuous(name = "-log10(q)", expand = c(0, 0) ) +
geom_hline(yintercept=-log10(thres_cmh_genome), linetype="dashed", color = "red") +
geom_hline(yintercept=-log10(thres_cmh_suggest), linetype="dashed", color = "blue") +
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
dev.off()
saveRDS(dt.pval)
saveRDS(dt.pval, "cold_cmh_result")
saveRDS(dt.af, "cold_af")
saveRDS(dt.dp, "cold_dp")
my.af <- dt.af.multi[which(apply(dt.af.multi,1,var)!=0),]
my.af <- dt.af.multi[which(apply(dt.af.multi[,6:ncol(dt.af.multi)],1,var)!=0),]
SNP <- paste(dt.af.multi$CHROM, dt.af.multi$POS, sep = ".")
rownames(my.af) <- SNP
my.af <- 2*asin(sqrt(my.af))
SNP <- paste(dt.af.multi$CHROM, dt.af.multi$POS, sep = ".")
my.af <- dt.af.multi[,6:ncol(dt.af.multi)]
rownames(my.af) <- SNP
my.af <- 2*asin(sqrt(my.af))
t_my.af <- as.data.frame(t(my.af))
#set sampleIDs as rownames for labeling in the PCA
row.names(t_my.af) <- mycols
t_my.af <- na.omit(t_my.af)#remove missing data
pdf("grand_PCA_arcsin_test2.pdf")
PCA(t_my.af,TRUE,TRUE,reps)
PCA(t_my.af,TRUE,TRUE,gens)
dev.off()
# pca
PCA <- function(df,c,s,coloring_factor)
{
pcadata<-na.omit(df)#remove missing data
pca.res <- prcomp(pcadata, retx=TRUE, center = c, scale. =s)
print(fviz_pca_ind(X = pca.res,
geom = "point",
col.ind=coloring_factor,
repel = TRUE,   # Avoid text overlapping
mean.point = FALSE,
addEllipses=FALSE)) # Default parameters for ellipses
}
pdf("grand_PCA_arcsin_test2.pdf")
PCA(t_my.af,TRUE,TRUE,reps)
PCA(t_my.af,TRUE,TRUE,gens)
dev.off()
library(poolSeq)
library(ggplot2)
library(factoextra)
library(reshape2)
library(data.table)
pdf("grand_PCA_arcsin_test2.pdf")
PCA(t_my.af,TRUE,TRUE,reps)
PCA(t_my.af,TRUE,TRUE,gens)
dev.off()
reps <- rep(c(1:10), times=7)
PCA(t_my.af,TRUE,TRUE,reps)
print(fviz_pca_ind(X = pca.res,
geom = "point",
col.ind=coloring_factor,
palette="aaas",
alpha.ind=trans_factor,
repel = TRUE,   # Avoid text overlapping
mean.point = FALSE,
addEllipses=FALSE)) # Default parameters for ellipses
tiff("cold_PCA_arcsined.tiff", width = 24, height = 24, res = 450, units = "cm")
PCA(t_my.af,TRUE,TRUE,coloring_factor = reps, trans_factor = gens)
# PCA(t_my.af,TRUE,TRUE,gens)
dev.off()
PCA <- function(df,c,s,coloring_factor, trans_factor)
{
pcadata<-na.omit(df)#remove missing data
pca.res <- prcomp(pcadata, retx=TRUE, center = c, scale. =s)
print(fviz_pca_ind(X = pca.res,
geom = "point",
col.ind=coloring_factor,
palette="aaas",
alpha.ind=trans_factor,
repel = TRUE,   # Avoid text overlapping
mean.point = FALSE,
addEllipses=FALSE)) # Default parameters for ellipses
}
tiff("cold_PCA_arcsined.tiff", width = 24, height = 24, res = 450, units = "cm")
PCA(t_my.af,TRUE,TRUE,coloring_factor = reps, trans_factor = gens)
# PCA(t_my.af,TRUE,TRUE,gens)
dev.off()
PCA <- function(df,c,s,coloring_factor, trans_factor)
{
pcadata<-na.omit(df)#remove missing data
pca.res <- prcomp(pcadata, retx=TRUE, center = c, scale. =s)
trans_factor <- 1- 0.005(trans_factor)
print(fviz_pca_ind(X = pca.res,
geom = "point",
col.ind=coloring_factor,
palette="aaas",
alpha.ind=trans_factor,
repel = TRUE,   # Avoid text overlapping
mean.point = FALSE,
addEllipses=FALSE)) # Default parameters for ellipses
}
tiff("cold_PCA_arcsined.tiff", width = 24, height = 24, res = 450, units = "cm")
PCA(t_my.af,TRUE,TRUE,coloring_factor = reps, trans_factor = gens)
# PCA(t_my.af,TRUE,TRUE,gens)
dev.off()
trans_factor <- 1- 0.005*trans_factor
PCA <- function(df,c,s,coloring_factor, trans_factor)
{
pcadata<-na.omit(df)#remove missing data
pca.res <- prcomp(pcadata, retx=TRUE, center = c, scale. =s)
trans_factor <- 1- 0.005*trans_factor
print(fviz_pca_ind(X = pca.res,
geom = "point",
col.ind=coloring_factor,
palette="aaas",
alpha.ind=trans_factor,
repel = TRUE,   # Avoid text overlapping
mean.point = FALSE,
addEllipses=FALSE)) # Default parameters for ellipses
}
tiff("cold_PCA_arcsined.tiff", width = 24, height = 24, res = 450, units = "cm")
PCA(t_my.af,TRUE,TRUE,coloring_factor = reps, trans_factor = gens)
# PCA(t_my.af,TRUE,TRUE,gens)
dev.off()
View(t_my.af)
